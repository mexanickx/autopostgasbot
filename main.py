import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
import asyncio
import os
import time
from os import environ

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_TOKEN = environ.get('8348898919:AAHsfBrt5QGS5_qoX8_5QLLOfSYcLh6aYAU')
if not API_TOKEN:
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
class Database:

    def __init__(self):
        self.user_channels = {}  # {user_id: {channel_id: channel_name}}
        self.scheduled_mailings = []  # –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        self.current_state = {}  # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


db = Database()


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_kb():
    buttons = [[KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")],
               [KeyboardButton(text="üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")],
               [KeyboardButton(text="üöÄ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
               [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")]]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def get_cancel_kb():
    return ReplyKeyboardMarkup(keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
                               resize_keyboard=True)


def get_confirm_kb():
    buttons = [[KeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")],
               [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)


def get_channels_kb(user_id, prefix="select"):
    buttons = []
    if user_id in db.user_channels:
        for channel_id, channel_name in db.user_channels[user_id].items():
            buttons.append([
                InlineKeyboardButton(text=channel_name
                                     or f"–ö–∞–Ω–∞–ª {channel_id}",
                                     callback_data=f"{prefix}_{channel_id}")
            ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ –≤ Telegram –∫–∞–Ω–∞–ª–∞—Ö.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_kb())


@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª")
async def add_channel(message: types.Message):
    user_id = message.from_user.id
    if user_id not in db.user_channels:
        db.user_channels[user_id] = {}

    db.current_state[user_id] = {"action": "awaiting_channel"}
    await message.answer(
        "üì§ –ü–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:",
        reply_markup=get_cancel_kb())


@dp.message(F.forward_from_chat)
async def handle_channel(message: types.Message):
    user_id = message.from_user.id
    user_state = db.current_state.get(user_id, {})

    if user_state.get("action") == "awaiting_channel":
        channel = message.forward_from_chat

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
        try:
            chat_member = await bot.get_chat_member(channel.id, bot.id)
            if chat_member.status not in ['administrator', 'creator']:
                await message.answer(
                    "‚ùå –Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞. "
                    "–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=get_main_kb())
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —è –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.",
                reply_markup=get_main_kb())
            return

        db.user_channels[user_id][channel.id] = channel.title
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {channel.title} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                             reply_markup=get_main_kb())
        db.current_state.pop(user_id, None)


@dp.message(F.text == "üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã")
async def list_channels(message: types.Message):
    user_id = message.from_user.id
    if user_id not in db.user_channels or not db.user_channels[user_id]:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
        return

    channels_list = "\n".join(
        f"{i+1}. {name}" if name else f"{i+1}. –ö–∞–Ω–∞–ª (ID: {id})"
        for i, (id, name) in enumerate(db.user_channels[user_id].items()))

    await message.answer(f"üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n{channels_list}",
                         reply_markup=get_main_kb())


@dp.message(F.text == "üöÄ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def create_mailing(message: types.Message):
    user_id = message.from_user.id
    if user_id not in db.user_channels or not db.user_channels[user_id]:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª.",
            reply_markup=get_main_kb())
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                         reply_markup=get_channels_kb(user_id))


@dp.callback_query(F.data.startswith("select_"))
async def select_channel(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    channel_id = int(callback.data.split("_")[1])

    if user_id not in db.user_channels or channel_id not in db.user_channels[
            user_id]:
        await callback.answer("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ",
                              show_alert=True)
        return

    db.current_state[user_id] = {
        "action": "creating_mailing",
        "channel_id": channel_id,
        "step": "awaiting_time"
    }

    await callback.message.answer(
        f"–í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {db.user_channels[user_id][channel_id]}\n"
        "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
        reply_markup=get_cancel_kb())
    await callback.answer()


@dp.message(lambda m: db.current_state.get(m.from_user.id, {}).get("action") ==
            "creating_mailing")
async def process_mailing(message: types.Message):
    user_id = message.from_user.id
    user_state = db.current_state.get(user_id, {})

    if user_state.get("step") == "awaiting_time":
        try:
            datetime.strptime(message.text, "%H:%M")
            user_state["time"] = message.text
            user_state["step"] = "awaiting_text"
            await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
                                 reply_markup=get_cancel_kb())
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30):",
                reply_markup=get_cancel_kb())

    elif user_state.get("step") == "awaiting_text":
        if not message.text.strip():
            await message.answer(
                "–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:",
                reply_markup=get_cancel_kb())
            return

        user_state["text"] = message.text.strip()
        user_state["step"] = "awaiting_photo"
        await message.answer("üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
                             reply_markup=get_cancel_kb())

    elif user_state.get("step") == "awaiting_photo":
        if not message.photo:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
                                 reply_markup=get_cancel_kb())
            return

        photo = message.photo[-1]
        file_id = photo.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path

        if not os.path.exists("media"):
            os.makedirs("media")

        local_path = f"media/{user_id}_{file_id}.jpg"
        await bot.download_file(file_path, local_path)
        user_state["photo_path"] = local_path

        await confirm_mailing(message)


async def confirm_mailing(message: types.Message):
    user_id = message.from_user.id
    user_state = db.current_state.get(user_id, {})

    if user_state.get("action") != "creating_mailing":
        return

    channel_id = user_state.get("channel_id")
    time_str = user_state.get("time")
    text = user_state.get("text")
    photo_path = user_state.get("photo_path")

    if None in [channel_id, time_str, text, photo_path]:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            reply_markup=get_main_kb())
        db.current_state.pop(user_id, None)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    db.current_state[user_id] = {
        "action": "confirming_mailing",
        "mailing_data": {
            "channel_id": channel_id,
            "time": time_str,
            "text": text,
            "photo_path": photo_path
        }
    }

    channel_name = db.user_channels[user_id][channel_id]
    confirm_text = (f"üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name}:\n\n"
                    f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
                    f"üìù –¢–µ–∫—Å—Ç: {text}\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ ¬´‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å¬ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏")

    with open(photo_path, 'rb') as photo_file:
        await message.answer_photo(photo=BufferedInputFile(
            photo_file.read(), filename="preview.jpg"),
                                   caption=confirm_text,
                                   reply_markup=get_confirm_kb())


@dp.message(F.text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
async def finalize_mailing(message: types.Message):
    user_id = message.from_user.id
    user_state = db.current_state.get(user_id, {})

    if user_state.get("action") != "confirming_mailing":
        return

    mailing_data = user_state.get("mailing_data", {})
    channel_id = mailing_data.get("channel_id")
    time_str = mailing_data.get("time")
    text = mailing_data.get("text")
    photo_path = mailing_data.get("photo_path")

    if None in [channel_id, time_str, text, photo_path]:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            reply_markup=get_main_kb())
        db.current_state.pop(user_id, None)
        return

    try:
        hour, minute = map(int, time_str.split(":"))
        channel_name = db.user_channels[user_id][channel_id]

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
        job_id = f"mailing_{user_id}_{channel_id}_{int(time.time())}"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.add_job(send_mailing,
                          'cron',
                          hour=hour,
                          minute=minute,
                          args=[channel_id, text, photo_path],
                          id=job_id)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Å—ã–ª–∫–µ
        db.scheduled_mailings.append({
            "user_id": user_id,
            "channel_id": channel_id,
            "time": time_str,
            "text": text,
            "photo_path": photo_path,
            "job_id": job_id
        })

        await message.answer(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"‚è∞ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {hour:02d}:{minute:02d} (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ)",
            reply_markup=get_main_kb())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}",
            reply_markup=get_main_kb())
    finally:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db.current_state.pop(user_id, None)


async def send_mailing(channel_id: int, text: str, photo_path: str):
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(photo_path, 'rb') as photo_file:
            await bot.send_photo(
                chat_id=channel_id,
                photo=BufferedInputFile(photo_file.read(),
                                        filename="mailing.jpg"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É 3 —Å–µ–∫—É–Ω–¥—ã
        await asyncio.sleep(3)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await bot.send_message(chat_id=channel_id, text=text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª {channel_id}: {e}")


@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª")
async def delete_channel_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in db.user_channels or not db.user_channels[user_id]:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                         reply_markup=get_channels_kb(user_id, "delete"))


@dp.callback_query(F.data.startswith("delete_"))
async def delete_channel_confirm(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    channel_id = int(callback.data.split("_")[1])

    if user_id not in db.user_channels or channel_id not in db.user_channels[
            user_id]:
        await callback.answer("–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ",
                              show_alert=True)
        return

    channel_name = db.user_channels[user_id][channel_id]
    db.current_state[user_id] = {
        "action": "deleting_channel",
        "channel_id": channel_id
    }

    await callback.message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª {channel_name}?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å")],
                      [KeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True))
    await callback.answer()


@dp.message(F.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å")
async def delete_channel_final(message: types.Message):
    user_id = message.from_user.id
    user_state = db.current_state.get(user_id, {})

    if user_state.get("action") != "deleting_channel":
        return

    channel_id = user_state.get("channel_id")
    if (user_id in db.user_channels
            and channel_id in db.user_channels[user_id]):

        channel_name = db.user_channels[user_id].pop(channel_id)
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª {channel_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                             reply_markup=get_main_kb())

    db.current_state.pop(user_id, None)


@dp.message(F.text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞")
async def cancel_channel_deletion(message: types.Message):
    user_id = message.from_user.id
    db.current_state.pop(user_id, None)
    await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
                         reply_markup=get_main_kb())


@dp.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_action(message: types.Message):
    user_id = message.from_user.id
    user_state = db.current_state.get(user_id, {})

    if user_state:
        # –£–¥–∞–ª—è–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ
        if "photo_path" in user_state:
            try:
                os.remove(user_state["photo_path"])
            except:
                pass
        elif ("mailing_data" in user_state
              and "photo_path" in user_state["mailing_data"]):
            try:
                os.remove(user_state["mailing_data"]["photo_path"])
            except:
                pass

    db.current_state.pop(user_id, None)
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_kb())


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    if not os.path.exists("media"):
        os.makedirs("media")

    if not scheduler.running:
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ –∑–∞–ø—É—â–µ–Ω")

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
